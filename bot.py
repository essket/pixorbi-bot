# bot.py
import os
import logging
import json
import httpx

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("pixorbi-bot")

# ---------- ENV ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # <‚Äî –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
RUNPOD_ENDPOINT_URL = os.getenv("RUNPOD_ENDPOINT_URL")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")     # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is required in Render ‚Üí Environment")

# ---------- –ü–ï–†–°–û–ù–ê–ñ (–ø—Ä–æ—Å—Ç–æ–π –≤—ã–±–æ—Ä) ----------
DEFAULT_CHAR = "anna"
CHAR_KEY = "char"  # –∫–ª—é—á, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ user_data


# –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã polling —Ä–∞–±–æ—Ç–∞–ª –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
async def on_startup(app: Application) -> None:
    await app.bot.delete_webhook(drop_pending_updates=True)
    log.info("Webhook deleted (drop_pending_updates=True). Starting polling‚Ä¶")


# /start
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data.setdefault(CHAR_KEY, DEFAULT_CHAR)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ RunPod.\n"
        "–ù–∞–ø–∏—à–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∏ –≤–µ—Ä–Ω—É –æ—Ç–≤–µ—Ç.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "  /char ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "  /char <–∏–º—è> ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø—Ä–∏–º–µ—Ä: /char anna)\n\n"
        "–î–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞–ø–∏—à–∏: –ê–Ω–Ω–∞"
    )


# /char
async def cmd_char(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.args:
        context.user_data[CHAR_KEY] = context.args[0].strip().lower()
        await update.message.reply_text(f"–û–∫, –≤—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {context.user_data[CHAR_KEY]}")
    else:
        cur = context.user_data.get(CHAR_KEY, DEFAULT_CHAR)
        await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂: {cur}")


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ RunPod (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
async def call_runpod(user_id: int, character: str, text: str) -> str:
    if not RUNPOD_ENDPOINT_URL:
        # –∑–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ RunPod –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        return f"{character.title()}: —è —É—Å–ª—ã—à–∞–ª–∞ —Ç–µ–±—è ‚Äî ¬´{text}¬ª."

    payload = {
        "input": {
            "user_id": str(user_id),
            "character": character,
            "text": text,
        }
    }

    try:
        # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π httpx –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –Ω–µ –Ω—É–∂–µ–Ω ‚Äî PTB 20 —Å–∞–º –∫—Ä—É—Ç–∏—Ç loop.
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º httpx.AsyncClient, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.
        async with httpx.AsyncClient(timeout=30) as client:
            # –¥–ª—è endpoint‚Äô–æ–≤ —Ç–∏–ø–∞ /runsync:
            if RUNPOD_ENDPOINT_URL.rstrip("/").endswith("/runsync"):
                resp = await client.post(RUNPOD_ENDPOINT_URL, json=payload)
            else:
                # –æ–±—ã—á–Ω—ã–π /run + –æ–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                run = await client.post(RUNPOD_ENDPOINT_URL, json=payload)
                run.raise_for_status()
                run_id = run.json().get("id")
                status_url = f"{RUNPOD_ENDPOINT_URL.rstrip('/')}/status/{run_id}"
                # –ø—Ä–æ—Å—Ç–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                for _ in range(60):
                    st = await client.get(status_url)
                    st.raise_for_status()
                    data = st.json()
                    if data.get("status") == "COMPLETED":
                        resp = st  # —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ st
                        break
                else:
                    raise RuntimeError("RunPod timeout while waiting for COMPLETED status")

        resp.raise_for_status()
        data = resp.json()
        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª–µ —Å –æ—Ç–≤–µ—Ç–æ–º
        output = data.get("output") or data.get("response") or data
        if isinstance(output, dict) and "reply" in output:
            return str(output["reply"])
        if isinstance(output, dict) and "msg" in output:
            return str(output["msg"])
        return str(output)
    except Exception as e:
        log.exception("RunPod error")
        return f"–£–ø—Å‚Ä¶ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}"


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        return

    user_id = update.effective_user.id if update.effective_user else 0
    character = context.user_data.get(CHAR_KEY, DEFAULT_CHAR)
    text = update.message.text.strip()

    reply = await call_runpod(user_id=user_id, character=character, text=text)
    await update.message.reply_text(reply)


# –õ–æ–≤–∏–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –ø–∞–¥–∞–ª–∏ –≤ –ª–æ–≥–∏ ¬´–±–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤¬ª
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    log.exception("Unhandled error", exc_info=context.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text("–ß—Ç–æ‚Äë—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –£–∂–µ —á–∏–Ω–∏–º üõ†Ô∏è")
    except Exception:
        pass


# ---------- Application —Å–±–æ—Ä–∫–∞ ----------
def build_app() -> Application:
    app = (
        Application.builder()
        .token(TELEGRAM_TOKEN)
        .post_init(on_startup)   # —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ polling
        .build()
    )

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("char", cmd_char))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    app.add_error_handler(on_error)
    return app


# ---------- main ----------
if __name__ == "__main__":
    application = build_app()
    # –í PTB 20.x run_polling ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        poll_interval=1.0,
    )
