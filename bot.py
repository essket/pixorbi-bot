# bot.py
# -*- coding: utf-8 -*-
import os
import logging
import time
import re
import random
import httpx
from datetime import datetime, timezone

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.constants import ChatAction
from telegram.error import Conflict
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ContextTypes, CallbackQueryHandler, filters
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = getLogger = logging.getLogger
log = getLogger("pixorbi-bot")

# ---------- ENV ----------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL", "thedrummer/unslopnemo-12b")
OR_HTTP_REFERER = os.getenv("OR_HTTP_REFERER", "https://pixorbibot.onrender.com")
OR_X_TITLE = os.getenv("OR_X_TITLE", "PixorbiDream")

# URL –≤–∞—à–µ–≥–æ –±—ç–∫–µ–Ω–¥–∞ (–ª—É—á—à–µ —Å—Ä–∞–∑—É —É–∫–∞–∑—ã–≤–∞—Ç—å /chat): https://<id>.api.runpod.ai/chat
RUNPOD_HTTP = os.getenv("RUNPOD_HTTP")

# ‚¨áÔ∏è –ù–û–í–û–ï: –¥–≤–∞ –∫–ª—é—á–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±—ç–∫–µ–Ω–¥—É —á–µ—Ä–µ–∑ LB
# rpa_‚Ä¶ = –∞–∫–∫–∞—É–Ω—Ç–Ω—ã–π –∫–ª—é—á Runpod (–¥–ª—è Cloudflare/LB)
RUNPOD_ACCOUNT_KEY = os.getenv("RUNPOD_ACCOUNT_KEY") or os.getenv("RUNPOD_API_KEY")
# APP_KEY = –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª—é—á –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ app.py)
APP_KEY = os.getenv("APP_KEY")

def _as_bool(v: str | None, default=False) -> bool:
    if v is None:
        return default
    return v.strip().lower() in {"1", "true", "yes", "y", "on"}

FORCE_RESELECT_ON_START = _as_bool(os.getenv("FORCE_RESELECT_ON_START"), True)

try:
    LANG_SWITCH_THRESHOLD = max(1, int(os.getenv("LANG_SWITCH_THRESHOLD", "3")))
except Exception:
    LANG_SWITCH_THRESHOLD = 3

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is required (Render ‚Üí Environment)")

# ---------- –ö–õ–Æ–ß–ò / –ö–û–ù–°–¢–ê–ù–¢–´ ----------
CHAR_KEY = "char"
LANG_KEY = "lang"
STARTED_KEY = "started"
AWAIT_SETUP = "await_setup"
LANG_MISMATCH_STREAK = "lang_mismatch_streak"

DIALOG_HISTORY = "dialog_history"
HIST_MAX_TURNS = 12  # —Ö—Ä–∞–Ω–∏—Ç—å –¥–æ 12 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö + 12 –æ—Ç–≤–µ—Ç–æ–≤

# ---------- –ü–ï–†–°–û–ù–ê–ñ–ò ----------
CHAR_PERSONAS = {
    "anna": {
        "ru": (
            "–¢—ã ‚Äî –ê–Ω–Ω–∞, –≥–µ—Ä–æ–∏–Ω—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –≤–∏–∑—É–∞–ª—å–Ω–æ–π –Ω–æ–≤–µ–ª–ª—ã. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
            "–¢–æ–Ω –º—è–≥–∫–∏–π, –∏–≥—Ä–∏–≤—ã–π, —á—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–π, –∫–æ—Ä–æ—Ç–∫–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã. "
            "–†–∞–∑—Ä–µ—à–µ–Ω—ã –ø–æ—Ü–µ–ª—É–∏, –æ–±—ä—è—Ç–∏—è –∏ –ª—ë–≥–∫–∞—è —ç—Ä–æ—Ç–∏–∫–∞ –º–µ–∂–¥—É —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–º–∏ –ø–æ –≤–∑–∞–∏–º–Ω–æ–º—É —Å–æ–≥–ª–∞—Å–∏—é, –±–µ–∑ –≤—É–ª—å–≥–∞—Ä—â–∏–Ω—ã. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏—Ü–∏–∑–º—ã –∏ —Å—Ü–µ–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–º–∞—Ä–∫–∏ –≤ —Å–∫–æ–±–∫–∞—Ö."
        ),
        "en": (
            "You are Anna, a heroine from a romantic visual novel. Reply ONLY in English. "
            "Soft, playful, tender tone with short natural sentences. "
            "Light romance and intimacy between consenting adults is allowed; keep it tasteful. "
            "Avoid meta stage directions in parentheses."
        ),
    },
    "aron": {
        "ru": (
            "–¢—ã ‚Äî –ê—Ä–æ–Ω, –≤–∑—Ä–æ—Å–ª—ã–π –≤–æ–∏–Ω. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º. "
            "–¢–æ–Ω –ø—Ä—è–º–æ–π, –≥—Ä—É–±–æ–≤–∞—Ç—ã–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –Ω–æ –±–µ–∑ –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏. "
            "–î–æ–ø—É—Å—Ç–∏–º—ã –ª—ë–≥–∫–∏–µ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ/—ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö; —Å—Ç–∏–ª—å —Å–¥–µ—Ä–∂–∞–Ω–Ω–æ-–º—É–∂—Å–∫–æ–π, –±–µ–∑ –ø–æ—à–ª—è—Ç–∏–Ω—ã."
        ),
        "en": (
            "You are Aron, a seasoned warrior. Reply ONLY in English. "
            "Blunt, rough-edged, confident tone (not cruel). "
            "Light adult romance allowed; keep it masculine and restrained, never vulgar."
        ),
    },
}

def lang_name(code: str) -> str:
    return "Russian" if code == "ru" else "English"

def persona_system_prompt(character: str, lang: str) -> str:
    base = CHAR_PERSONAS.get(character, {}).get(
        lang,
        "You are a helpful roleplay companion. Reply ONLY in the chosen language.",
    )
    enforce = (
        f"\nHard rule: Respond strictly in {lang_name(lang)}. "
        f"If the user speaks another language, still answer in {lang_name(lang)} "
        f"and briefly remind them of the chosen language."
    )
    canon = (
        "\nConsistency rules:\n"
        "- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á—å —Ñ–∞–∫—Ç–∞–º, —É–∂–µ —Å–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–±–æ–π —Ä–∞–Ω–µ–µ –≤ –±–µ—Å–µ–¥–µ.\n"
        "- –î–µ—Ä–∂–∏ –æ–¥–∏–Ω –æ–±—Ä–∞–∑ –∏ –±–∏–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Ö –Ω–µ –º–µ–Ω—è–µ—Ç.\n"
        "- –ê–Ω–Ω–∞ –≥–æ–≤–æ—Ä–∏—Ç –≤ –∂–µ–Ω—Å–∫–æ–º —Ä–æ–¥–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞; –Ω–µ –º–µ–Ω—è–π –ø–æ–ª/—Ä–æ–ª—å.\n"
        "- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –Ω–æ–≤—ã—Ö –≤–µ–¥—É—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –±–µ–∑ —è–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
        "- –ö–æ—Ä–æ—Ç–∫–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã; –±–µ–∑ –∞–Ω–≥–ª–∏—Ü–∏–∑–º–æ–≤ –∏ —Ä–µ–º–∞—Ä–æ–∫ –≤ —Å–∫–æ–±–∫–∞—Ö."
        if lang == "ru" else
        "\nConsistency rules:\n"
        "- Never contradict facts you already stated in this chat.\n"
        "- Keep a stable persona/biography unless the user changes it.\n"
        "- Anna speaks in female first-person; never swap gender/role.\n"
        "- Do not invent new leading characters unless requested.\n"
        "- Short natural sentences; no stage directions in parentheses."
    )
    fewshot = (
        "\n\n–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª—è:\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ü–æ—Ü–µ–ª—É–µ—à—å –º–µ–Ω—è?\n"
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –¢–∏—Ö–æ –∫–∏–≤–∞—é –∏ —Ç—è–Ω—É—Å—å –∫ —Ç–≤–æ–∏–º –≥—É–±–∞–º. –¢—ë–ø–ª—ã–π, –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Ü–µ–ª—É–π ‚Äî –¥—ã—Ö–∞–Ω–∏–µ —Å–º–µ—à–∞–ª–æ—Å—å.\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –û–±–Ω–∏–º–∏ –º–µ–Ω—è.\n"
        "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: –û–±–≤–∏–≤–∞—é —Ç–µ–±—è —Ä—É–∫–∞–º–∏ –∏ –ø—Ä–∏–∂–∏–º–∞—é—Å—å –±–ª–∏–∂–µ. –°—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ø–æ–∫–æ–π–Ω–æ."
        if lang == "ru" else
        "\n\nStyle examples:\n"
        "User: Will you kiss me?\n"
        "Assistant: I nod and lean in. A warm, brief kiss ‚Äî our breaths mix.\n"
        "User: Hold me.\n"
        "Assistant: I wrap my arms around you, closer. Calm settles in."
    )
    return base + enforce + canon + fewshot

# ---------- –•–†–ê–ù–ò–õ–ö–ê –î–ò–ê–õ–û–ì–ê ----------
def _push_history(ctx: ContextTypes.DEFAULT_TYPE, role: str, content: str) -> None:
    hist = ctx.user_data.get(DIALOG_HISTORY)
    if not isinstance(hist, list):
        hist = []
    hist.append({"role": role, "content": content})
    if len(hist) > HIST_MAX_TURNS * 2:
        hist = hist[-HIST_MAX_TURNS*2:]
    ctx.user_data[DIALOG_HISTORY] = hist

def _build_messages(ctx: ContextTypes.DEFAULT_TYPE, system_prompt: str, user_text: str) -> list[dict]:
    msgs = [{"role": "system", "content": system_prompt}]
    hist = ctx.user_data.get(DIALOG_HISTORY)
    if isinstance(hist, list) and hist:
        msgs.extend(hist)
    msgs.append({"role": "user", "content": user_text})
    return msgs

# ---------- –Ø–ó–´–ö–û–í–´–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ----------
def detect_lang(text: str) -> str | None:
    has_cyr = bool(re.search(r"[–ê-–Ø–∞-—è–Å—ë]", text))
    has_lat = bool(re.search(r"[A-Za-z]", text))
    if has_cyr and not has_lat:
        return "ru"
    if has_lat and not has_cyr:
        return "en"
    return None

LANG_REMINDERS = {
    "anna": {
        "ru": [
            "–î–∞–≤–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üòä",
            "–Ø —Å–µ–π—á–∞—Å –≥–æ–≤–æ—Ä—é —Ç–æ–ª—å–∫–æ –ø–æ-—Ä—É—Å—Å–∫–∏. –ü–µ—Ä–µ–∫–ª—é—á–∏—à—å—Å—è?",
            "–ë–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ, –ª–∞–¥–Ω–æ? –ù–∞ —Ä—É—Å—Å–∫–æ–º –±—É–¥–µ—Ç –ª–µ–≥—á–µ üí´",
            "–ü–æ–Ω–∏–º–∞—é —Ç–µ–±—è, –Ω–æ –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.",
        ],
        "en": [
            "Let‚Äôs keep it in English, please üí´",
            "I‚Äôm answering only in English now. Can you switch?",
            "Sorry, English only for me right now.",
            "Got it ‚Äî but I‚Äôll reply in English only.",
        ],
    },
    "aron": {
        "ru": [
            "–ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏. –ë—ã—Å—Ç—Ä–æ.",
            "–†—É—Å—Å–∫–∏–π –∑–¥–µ—Å—å. –ü–µ—Ä–µ–∫–ª—é—á–∏—Å—å.",
            "–ü–æ-—Ä—É—Å—Å–∫–∏ –¥–∞–≤–∞–π. –¢–∞–∫ –ø—Ä–æ—â–µ.",
            "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ù–µ —É—Å–ª–æ–∂–Ω—è–π.",
        ],
        "en": [
            "English. Keep it simple.",
            "Switch to English. Now.",
            "Use English ‚Äî no fuss.",
            "English only. Stick to it.",
        ],
    },
}

def get_lang_reminder(character: str, lang: str) -> str:
    char = character.lower()
    if char not in LANG_REMINDERS:
        char = "anna"
    variants = LANG_REMINDERS.get(char, {}).get(lang) or LANG_REMINDERS["anna"][lang]
    return random.choice(variants)

# ---------- –°–ê–ù–ò–¢–ê–ô–ó–ï–† ----------
RE_PUNCT_ONLY = re.compile(r"^[\s!?.‚Ä¶-]{10,}$")
RE_FILLS = re.compile(r"\b(?:uh|um|lol|haha|giggle|winks|wipe)\b", re.I)

def clean_text(s: str) -> str:
    if not s:
        return s
    s = RE_FILLS.sub("", s)
    s = re.sub(r"\s+([,.!?;:])", r"\1", s)
    s = re.sub(r"\.{4,}", "...", s)
    s = re.sub(r"[ \t]{2,}", " ", s)
    return s.strip()

def looks_bad(s: str) -> bool:
    if not s or RE_PUNCT_ONLY.match(s):
        return True
    if len(set(s.strip())) <= 2 and len(s.strip()) >= 20:
        return True
    return False

# ---------- TELEGRAM ACTIONS ----------
async def send_action_safe(update: Update, action: ChatAction) -> None:
    try:
        await update.effective_chat.send_action(action)
    except Exception:
        pass

# ---------- OPENROUTER / BACKEND ----------
async def call_openrouter(character: str, lang: str, text: str, ctx: ContextTypes.DEFAULT_TYPE, temperature: float = 0.6) -> str:
    """
    –ï—Å–ª–∏ –∑–∞–¥–∞–Ω RUNPOD_HTTP ‚Äî —à–ª—ë–º –≤ –≤–∞—à –±—ç–∫–µ–Ω–¥ (/chat), –≤–º–µ—Å—Ç–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏
    –Ω—É–∂–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏. –ò–Ω–∞—á–µ ‚Äî –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ OpenRouter (fallback).
    """
    history = ctx.user_data.get(DIALOG_HISTORY) or []

    if RUNPOD_HTTP:
        try:
            headers = {"Content-Type": "application/json"}
            if RUNPOD_ACCOUNT_KEY:
                headers["Authorization"] = f"Bearer {RUNPOD_ACCOUNT_KEY}"
            if APP_KEY:
                headers["x-api-key"] = APP_KEY

            async with httpx.AsyncClient(timeout=httpx.Timeout(60.0)) as client:
                r = await client.post(
                    RUNPOD_HTTP,
                    headers=headers,
                    json={
                        "character": character,
                        "message": text,
                        "history": history,
                    },
                )
                r.raise_for_status()
                data = r.json()

            content = (data or {}).get("reply", "") or ""
            content = clean_text(content)
            content = re.sub(r"([!?‚Ä¶])\1{3,}", r"\1\1", content)
            return content or "(–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)"
        except Exception as e:
            log.warning("RUNPOD_HTTP failed, falling back to OpenRouter: %s", e)

    # ---- Fallback: –ø—Ä—è–º–æ–π OpenRouter, –∫–∞–∫ –±—ã–ª–æ ----
    if not OPENROUTER_API_KEY:
        return "(LLM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"

    system_prompt = persona_system_prompt(character, lang)
    messages = _build_messages(ctx, system_prompt, text)

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": OR_HTTP_REFERER,
        "X-Title": OR_X_TITLE,
        "Content-Type": "application/json",
    }
    payload = {
        "model": OPENROUTER_MODEL,
        "messages": messages,
        "temperature": temperature,
        "top_p": 0.85,
        "frequency_penalty": 0.35,
        "max_tokens": 360,
    }

    async with httpx.AsyncClient(timeout=httpx.Timeout(60.0)) as client:
        r = await client.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers, json=payload
        )
        r.raise_for_status()
        data = r.json()

    choice = (data.get("choices") or [{}])[0]
    content = (choice.get("message") or {}).get("content") or ""
    content = clean_text(content)
    content = re.sub(r"([!?‚Ä¶])\1{3,}", r"\1\1", content)
    return content or "(–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)"

# ---------- –ö–ù–û–ü–ö–ò ----------
def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", callback_data="menu|change_char")],
        [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="menu|change_lang")],
    ])

def choose_char_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ê–Ω–Ω–∞ ‚ù§Ô∏è", callback_data="char|anna")],
        [InlineKeyboardButton("–ê—Ä–æ–Ω ‚öîÔ∏è", callback_data="char|aron")],
    ])

def choose_lang_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang|ru")],
        [InlineKeyboardButton("English üá¨üáß", callback_data="lang|en")],
    ])

# ---------- HELPERS ----------
def need_setup(ctx: ContextTypes.DEFAULT_TYPE) -> bool:
    if ctx.user_data.get(AWAIT_SETUP):
        return True
    if not ctx.user_data.get(CHAR_KEY) or not ctx.user_data.get(LANG_KEY):
        return True
    return False

def reset_setup(ctx: ContextTypes.DEFAULT_TYPE) -> None:
    ctx.user_data[AWAIT_SETUP] = True
    ctx.user_data[LANG_MISMATCH_STREAK] = 0
    ctx.user_data[DIALOG_HISTORY] = []

# ---------- WEBHOOK CLEANUP ----------
async def delete_webhook(app: Application) -> None:
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        log.info("Webhook deleted (drop_pending_updates=True).")
        app.bot_data["started_at"] = datetime.now(timezone.utc)
    except Exception as e:
        log.warning("delete_webhook failed: %s", e)

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    ctx.user_data[STARTED_KEY] = True

    if FORCE_RESELECT_ON_START:
        ctx.user_data.pop(CHAR_KEY, None)
        ctx.user_data.pop(LANG_KEY, None)

    reset_setup(ctx)

    if not ctx.user_data.get(CHAR_KEY):
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=choose_char_kb())
        return

    if not ctx.user_data.get(LANG_KEY):
        char = ctx.user_data[CHAR_KEY].title()
        await update.message.reply_text(f"–ü–µ—Ä—Å–æ–Ω–∞–∂: {char}. –í—ã–±–µ—Ä–∏ —è–∑—ã–∫:", reply_markup=choose_lang_kb())
        return

    await update.message.reply_text(
        f"–ü–µ—Ä—Å–æ–Ω–∞–∂: {ctx.user_data[CHAR_KEY].title()}, —è–∑—ã–∫: {ctx.user_data[LANG_KEY].upper()}. "
        f"–ù–∞–∂–º–∏ ¬´–ú–µ–Ω—é¬ª –¥–ª—è —Å–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
        reply_markup=main_menu_kb()
    )

async def cmd_menu(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ú–µ–Ω—é:", reply_markup=main_menu_kb())

async def cmd_char(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    cur = ctx.user_data.get(CHAR_KEY, "–Ω–µ –≤—ã–±—Ä–∞–Ω")
    await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂: {cur}")

async def cmd_lang(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    cur = ctx.user_data.get(LANG_KEY, "–Ω–µ –≤—ã–±—Ä–∞–Ω")
    await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫: {cur}. –°–º–µ–Ω–∏—Ç—å?", reply_markup=choose_lang_kb())

async def cmd_reset(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    ctx.user_data.clear()
    reset_setup(ctx)
    await update.message.reply_text("–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫. –í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=choose_char_kb())

# ---------- CALLBACKS ----------
def _is_stale_callback(update: Update, app: Application) -> bool:
    started_at = app.bot_data.get("started_at")
    msg = update.callback_query.message
    if not (started_at and msg and msg.date):
        return False
    return msg.date.replace(tzinfo=timezone.utc) < started_at

async def on_callback(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    q = update.callback_query
    await q.answer()

    if _is_stale_callback(update, ctx.application):
        log.info("Ignore stale callback: %s", q.data)
        return

    parts = (q.data or "").split("|", 1)
    tag = parts[0]
    val = parts[1] if len(parts) > 1 else None

    if tag == "char" and val:
        ctx.user_data[CHAR_KEY] = val
        ctx.user_data.pop(LANG_KEY, None)
        reset_setup(ctx)
        await q.edit_message_text(f"–í—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {val.title()}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
                                  reply_markup=choose_lang_kb())
        return

    if tag == "lang" and val:
        ctx.user_data[LANG_KEY] = val
        ctx.user_data[AWAIT_SETUP] = False
        ctx.user_data[LANG_MISMATCH_STREAK] = 0
        await q.edit_message_text(
            f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val.upper()}. –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!",
            reply_markup=main_menu_kb()
        )
        return

    if tag == "menu" and val == "change_char":
        reset_setup(ctx)
        await q.edit_message_text("–í—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=choose_char_kb())
        return

    if tag == "menu" and val == "change_lang":
        reset_setup(ctx)
        await q.edit_message_text("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:", reply_markup=choose_lang_kb())
        return

# ---------- –¢–ï–ö–°–¢ ----------
async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        return

    # –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ–π–¥—ë–Ω –≤—ã–±–æ—Ä ‚Äî –Ω–µ –æ–±—â–∞–µ–º—Å—è
    if need_setup(ctx):
        if not ctx.user_data.get(CHAR_KEY):
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=choose_char_kb())
        elif not ctx.user_data.get(LANG_KEY):
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫:", reply_markup=choose_lang_kb())
        else:
            await update.message.reply_text("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—à–µ, –∑–∞—Ç–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏–º.")
        return

    char = ctx.user_data.get(CHAR_KEY)
    lang = ctx.user_data.get(LANG_KEY)
    user_text = update.message.text.strip()

    # –ö–æ–Ω—Ç—Ä–æ–ª—å —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    in_lang = detect_lang(user_text)
    if in_lang and in_lang != lang:
        streak = int(ctx.user_data.get(LANG_MISMATCH_STREAK, 0)) + 1
        ctx.user_data[LANG_MISMATCH_STREAK] = streak

        reminder = get_lang_reminder(char, lang)
        if streak >= LANG_SWITCH_THRESHOLD:
            await update.message.reply_text(reminder, reply_markup=choose_lang_kb())
        else:
            await update.message.reply_text(reminder)
        return
    else:
        if ctx.user_data.get(LANG_MISMATCH_STREAK):
            ctx.user_data[LANG_MISMATCH_STREAK] = 0

    # –ü–∞–º—è—Ç—å: –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–ª–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    _push_history(ctx, "user", user_text)

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä ¬´–ø–µ—á–∞—Ç–∞–µ—Ç¬ª
    await send_action_safe(update, ChatAction.TYPING)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    try:
        reply = await call_openrouter(char, lang, user_text, ctx, temperature=0.6)
    except httpx.HTTPStatusError as e:
        log.exception("OpenRouter HTTP error")
        await update.message.reply_text(f"LLM HTTP {e.response.status_code}: {e.response.reason_phrase}")
        return
    except Exception as e:
        log.exception("OpenRouter error")
        await update.message.reply_text(f"LLM –æ—à–∏–±–∫–∞: {e}")
        return

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –º—É—Å–æ—Ä–Ω—ã–π ‚Äî 2-—è –ø–æ–ø—ã—Ç–∫–∞ —Å –±–æ–ª–µ–µ ¬´—Å–¥–µ—Ä–∂–∞–Ω–Ω—ã–º–∏¬ª –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if looks_bad(reply):
        log.warning("Bad reply detected, retrying with temperature=0.4")
        await send_action_safe(update, ChatAction.TYPING)
        try:
            reply = await call_openrouter(char, lang, user_text, ctx, temperature=0.4)
        except Exception:
            pass

    if looks_bad(reply):
        reply = "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ ‚Äî —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –º—ã—Å–ª—å —á—É—Ç—å —Ç–æ—á–Ω–µ–µ."

    _push_history(ctx, "assistant", reply)
    await update.message.reply_text(reply)

# ---------- –û–®–ò–ë–ö–ò ----------
async def on_error(update: object, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if isinstance(ctx.error, Conflict):
        log.warning("409 Conflict. Waiting‚Ä¶")
        return
    log.exception("Unhandled error", exc_info=ctx.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text("–û—à–∏–±–∫–∞ üõ†Ô∏è")
    except Exception:
        pass

# ---------- APP ----------
def build_app() -> Application:
    app = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .post_init(delete_webhook)
        .build()
    )
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("menu", cmd_menu))
    app.add_handler(CommandHandler("char", cmd_char))
    app.add_handler(CommandHandler("lang", cmd_lang))
    app.add_handler(CommandHandler("reset", cmd_reset))
    app.add_handler(CallbackQueryHandler(on_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_error_handler(on_error)
    return app

if __name__ == "__main__":
    app = build_app()
    while True:
        try:
            app.run_polling(allowed_updates=Update.ALL_TYPES, poll_interval=1.0)
            break
        except Conflict:
            log.warning("409 Conflict. Retry in 5s‚Ä¶")
            time.sleep(5)
