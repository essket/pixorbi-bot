# bot.py
# -*- coding: utf-8 -*-
import os
import logging
import httpx

from telegram import Update
from telegram.error import Conflict
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    level=logging.INFO,
)
log = logging.getLogger("pixorbi-bot")

# ---------- ENV ----------
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# RunPod (–¥–ª—è —Å–≤—è–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –ª–æ–≥–∏–∫–æ–π/–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ —Ç.–ø.)
RUNPOD_ENDPOINT_ID = os.getenv("RUNPOD_ENDPOINT_ID")
RUNPOD_API_KEY = os.getenv("RUNPOD_API_KEY")
RUNPOD_RUNSYNC_URL = (
    f"https://api.runpod.ai/v2/{RUNPOD_ENDPOINT_ID}/runsync" if RUNPOD_ENDPOINT_ID else None
)

# OpenRouter (LLM –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤)
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_MODEL = os.getenv("OPENROUTER_MODEL", "nothingiisreal/mn-celeste-12b")
OR_HTTP_REFERER = os.getenv("OR_HTTP_REFERER", "https://pixorbibot.onrender.com")
OR_X_TITLE = os.getenv("OR_X_TITLE", "PixorbiDream")

DEFAULT_CHAR = os.getenv("DEFAULT_CHARACTER", "anna").lower()
CHAR_KEY = "char"

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is required (Render ‚Üí Environment)")

# ---------- –ü–ï–†–°–û–ù–ê–ñ–ò / –ü–ï–†–°–û–ù–´ ----------
# –ú–∏–Ω–∏-—à–∞–±–ª–æ–Ω—ã ¬´–ª–∏—á–Ω–æ—Å—Ç–µ–π¬ª –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–º–æ–∂–µ—à—å –¥–æ–ø–æ–ª–Ω—è—Ç—å —Å–ª–æ–≤–∞—Ä—å)
CHAR_PERSONAS = {
    "anna": (
        "You are Anna ‚Äî a warm, witty companion from a romantic visual novel. "
        "Speak in a soft, playful tone, staying in-character. Be concise, engaging, and keep continuity."
    ),
    # –ø—Ä–∏–º–µ—Ä: "mira": "You are Mira ‚Äî ...",
}

def get_persona(character: str) -> str:
    return CHAR_PERSONAS.get(
        character.lower(),
        "You are a helpful, engaging companion. Stay consistent and in character as defined by the user's choice.",
    )

# ---------- –¢–ï–•–ù–ò–ß–ï–°–ö–û–ï ----------
async def delete_webhook(app: Application) -> None:
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
        log.info("Webhook deleted (drop_pending_updates=True).")
    except Exception as e:
        log.warning("delete_webhook failed: %s", e)

# ----- RunPod –≤—ã–∑–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) -----
async def call_runpod(user_id: int, character: str, text: str) -> str:
    """–í—ã–∑–æ–≤ Serverless —á–µ—Ä–µ–∑ /runsync. –ï—Å–ª–∏ RunPod –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥–ª—É—à–∫—É."""
    if not (RUNPOD_RUNSYNC_URL and RUNPOD_API_KEY):
        return f"{character.title()}: —è —É—Å–ª—ã—à–∞–ª–∞ —Ç–µ–±—è ‚Äî ¬´{text}¬ª."

    payload = {
        "input": {
            "user_id": str(user_id),
            "character": character,
            "text": text,
        }
    }
    headers = {
        "Authorization": f"Bearer {RUNPOD_API_KEY}",
        "Content-Type": "application/json",
    }

    try:
        async with httpx.AsyncClient(timeout=httpx.Timeout(60.0)) as client:
            resp = await client.post(RUNPOD_RUNSYNC_URL, json=payload, headers=headers)
            resp.raise_for_status()
            data = resp.json()

        output = data.get("output") if isinstance(data, dict) else data
        if isinstance(output, dict):
            if "reply" in output:
                return str(output["reply"])
            if "msg" in output:
                return str(output["msg"])
        return str(output)

    except httpx.HTTPStatusError as e:
        log.exception("RunPod HTTP error")
        return f"–£–ø—Å‚Ä¶ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e.response.status_code} {e.response.reason_phrase}\n{e.request.url}"
    except Exception as e:
        log.exception("RunPod error")
        return f"–£–ø—Å‚Ä¶ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}"

# ----- OpenRouter –≤—ã–∑–æ–≤ (LLM-–¥–∏–∞–ª–æ–≥) -----
async def call_openrouter(user_id: int, character: str, text: str) -> str:
    """–î–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ OpenRouter. –ï—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å fallback –Ω–∞ RunPod."""
    if not OPENROUTER_API_KEY:
        raise RuntimeError("OPENROUTER_API_KEY is missing")

    system_prompt = get_persona(character)
    # (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏/–ø–∞–º—è—Ç—å —Ç—É—Ç)
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": text},
    ]

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        # –≠—Ç–∏ –¥–≤–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ OpenRouter –ø—Ä–æ—Å–∏—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å (—Ä–µ—Ñ–µ—Ä–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å URL —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞)
        "HTTP-Referer": OR_HTTP_REFERER,
        "X-Title": OR_X_TITLE,
        "Content-Type": "application/json",
    }
    payload = {
        "model": OPENROUTER_MODEL,
        "messages": messages,
        "temperature": 0.8,
        "max_tokens": 256,
    }

    try:
        async with httpx.AsyncClient(timeout=httpx.Timeout(60.0)) as client:
            resp = await client.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload,
            )
            resp.raise_for_status()
            data = resp.json()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        choice = (data.get("choices") or [{}])[0]
        content = (choice.get("message") or {}).get("content")
        if not content:
            return f"{character.title()}: (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏)"
        return content.strip()
    except httpx.HTTPStatusError as e:
        log.exception("OpenRouter HTTP error")
        code = e.response.status_code
        reason = e.response.reason_phrase
        detail = ""
        try:
            detail = e.response.text[:300]
        except Exception:
            pass
        return f"LLM –æ—à–∏–±–∫–∞: {code} {reason}\n{detail}"
    except Exception as e:
        log.exception("OpenRouter error")
        return f"LLM –æ—à–∏–±–∫–∞: {e}"

# ---------- –£–¢–ò–õ–ò–¢–´ ----------
def get_user_char(ctx: ContextTypes.DEFAULT_TYPE) -> str:
    char = ctx.user_data.get(CHAR_KEY)
    if not char:
        ctx.user_data[CHAR_KEY] = DEFAULT_CHAR
        char = DEFAULT_CHAR
    return char

# ---------- –ö–û–ú–ê–ù–î–´ ----------
async def cmd_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    ctx.user_data.setdefault(CHAR_KEY, DEFAULT_CHAR)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ RunPod –∏ OpenRouter.\n"
        "–ù–∞–ø–∏—à–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚Äî —è –æ—Ç–≤–µ—Ç–ª—é –≤ —Å—Ç–∏–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "  /char ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "  /char <–∏–º—è> ‚Äî –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø—Ä–∏–º–µ—Ä: /char anna)\n\n"
        "–î–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞–ø–∏—à–∏: –ê–Ω–Ω–∞"
    )

async def cmd_char(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if ctx.args:
        ctx.user_data[CHAR_KEY] = " ".join(ctx.args).strip().lower()
        await update.message.reply_text(f"–û–∫, –≤—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {ctx.user_data[CHAR_KEY]}")
    else:
        await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂: {get_user_char(ctx)}")

# ---------- –¢–ï–ö–°–¢–´ ----------
async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.text:
        return
    user_id = update.effective_user.id if update.effective_user else 0
    character = get_user_char(ctx)
    text = update.message.text.strip()

    # 1) –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Ä–µ–∑ OpenRouter (–µ—Å–ª–∏ –∫–ª—é—á –∑–∞–¥–∞–Ω).
    # 2) –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚Äî –ø–∞–¥–∞–µ–º –≤ RunPod (–∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É).
    reply = None
    if OPENROUTER_API_KEY:
        reply = await call_openrouter(user_id=user_id, character=character, text=text)
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç ‚Äî —è–≤–Ω–∞—è –æ—à–∏–±–∫–∞ LLM, –ø–æ–ø—Ä–æ–±—É–µ–º RunPod –∫–∞–∫ fallback
        if reply.startswith("LLM –æ—à–∏–±–∫–∞:"):
            rp_reply = await call_runpod(user_id=user_id, character=character, text=text)
            reply = rp_reply or reply
    else:
        reply = await call_runpod(user_id=user_id, character=character, text=text)

    await update.message.reply_text(reply)

# ---------- –û–®–ò–ë–ö–ò ----------
async def on_error(update: object, ctx: ContextTypes.DEFAULT_TYPE) -> None:
    # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ–ª–ª–∏–Ω–≥–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ/—Ä–µ—Å—Ç–∞—Ä—Ç–µ
    if isinstance(ctx.error, Conflict):
        log.warning("Telegram 409 Conflict: –≤—Ç–æ—Ä–æ–π getUpdates –≤ —Ç–æ—Ç –∂–µ —Ç–æ–∫–µ–Ω. –ü–æ–¥–æ–∂–¥—ë–º ‚Äî —Å–∞–º–æ —Ä–∞—Å—Å–æ—Å—ë—Ç—Å—è.")
        return
    log.exception("Unhandled error", exc_info=ctx.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text("–ß—Ç–æ‚Äë—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –£–∂–µ —á–∏–Ω–∏–º üõ†Ô∏è")
    except Exception:
        pass

# ---------- –°–ë–û–†–ö–ê –ò –ó–ê–ü–£–°–ö ----------
def build_app() -> Application:
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).post_init(delete_webhook).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("char", cmd_char))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_error_handler(on_error)
    return app

if __name__ == "__main__":
    app = build_app()
    # –†–µ—Ç—Ä–µ–π –Ω–∞ —Å–ª—É—á–∞–π 409 Conflict –ø—Ä–∏ –≥–æ—Ä—è—á–µ–º –¥–µ–ø–ª–æ–µ
    while True:
        try:
            app.run_polling(
                allowed_updates=Update.ALL_TYPES,
                poll_interval=1.0,
            )
            break
        except Conflict:
            log.warning("409 Conflict (–¥—Ä—É–≥–æ–π –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞). –ñ–¥—É 5 —Å–µ–∫ –∏ –ø—Ä–æ–±—É—é —Å–Ω–æ–≤–∞‚Ä¶")
            import time
            time.sleep(5)

